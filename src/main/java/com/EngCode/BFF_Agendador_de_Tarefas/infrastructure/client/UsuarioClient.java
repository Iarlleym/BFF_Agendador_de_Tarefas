package com.EngCode.BFF_Agendador_de_Tarefas.infrastructure.client;

// BLOC√ÉO 1: IMPORTA√á√ïES E DTOs
// -------------------------------------------------------------------------

// Importa os DTOs, que s√£o os formatos JSON esperados na comunica√ß√£o HTTP.

import com.EngCode.BFF_Agendador_de_Tarefas.business.dto.in.EnderecoDTORequest;
import com.EngCode.BFF_Agendador_de_Tarefas.business.dto.in.LoginDTORequest;
import com.EngCode.BFF_Agendador_de_Tarefas.business.dto.in.TelefoneDTORequest;
import com.EngCode.BFF_Agendador_de_Tarefas.business.dto.in.UsuarioDTORequest;
import com.EngCode.BFF_Agendador_de_Tarefas.business.dto.out.EnderecoDTOResponse;
import com.EngCode.BFF_Agendador_de_Tarefas.business.dto.out.TelefoneDTOResponse;
import com.EngCode.BFF_Agendador_de_Tarefas.business.dto.out.UsuarioDTOResponse;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.*;

/**
 * üîπ Interface respons√°vel por fazer a comunica√ß√£o com outro servi√ßo (microservi√ßo de usu√°rios)
 * usando o Feign Client ‚Äî uma ferramenta que facilita chamadas HTTP entre APIs no Spring Boot.
 *
 * Em resumo: essa interface permite buscar dados de um usu√°rio em outro sistema,
 * apenas chamando um m√©todo Java (sem precisar escrever c√≥digo HTTP manualmente).
 */

// BLOC√ÉO 2: CONFIGURA√á√ÉO DO FEIGN CLIENT
// -------------------------------------------------------------------------
@FeignClient(name = "usuario", url = "${usuario.url}")
// ANOTA√á√ÉO FEIGN: Marca esta interface como um cliente REST que o Spring deve implementar automaticamente.
// name = "usuario": Nome l√≥gico do servi√ßo (usado internamente).
// url = "${usuario.url}": Endere√ßo base do Microsservi√ßo de Usu√°rios, puxado de uma vari√°vel no application.properties (ex: http://localhost:8081).
public interface UsuarioClient {
// Feign Clients s√£o sempre interfaces.

    // BLOC√ÉO 3: ENDPOINTS DE CONSULTA (GET)
    // -------------------------------------------------------------------------

    /**
     * üîπ M√©todo respons√°vel por buscar um usu√°rio a partir do e-mail informado.
     * Esse m√©todo faz uma requisi√ß√£o GET para o endpoint "/usuario" do outro servi√ßo.
     *
     * Exemplo de chamada:
     * GET http://servidor/usuario?email=teste@mail.com
     * Header: Authorization: Bearer tokenAqui
     */
    @GetMapping ("/usuario")
    // Mapeia o m√©todo Java para uma requisi√ß√£o HTTP GET no caminho "/usuario".
    UsuarioDTOResponse buscaUsuarioPorEmail(
            @RequestParam("email") String email,          // @RequestParam: Indica que 'email' deve ser passado como Query Parameter na URL.
            @RequestHeader("Authorization") String token  // @RequestHeader: Indica que 'token' deve ser enviado no cabe√ßalho HTTP "Authorization". ESSENCIAL para seguran√ßa.
    );

    // BLOC√ÉO 4: ENDPOINTS DE CRIA√á√ÉO E LOGIN (POST)
    // -------------------------------------------------------------------------

    @PostMapping ("/usuario")
        // Mapeia requisi√ß√µes HTTP POST para /usuario. Usado para Cadastro.
    UsuarioDTOResponse salvaUsuario(@RequestBody UsuarioDTORequest usuarioDTO);
    // @RequestBody: O objeto usuarioDTO ser√° serializado para JSON e enviado no corpo da requisi√ß√£o.

    @PostMapping("/usuario/login")
        // Mapeia requisi√ß√µes HTTP POST para /usuario/login.
    String login(@RequestBody LoginDTORequest loginDTORequest);
    // Retorno: Espera-se uma String simples do Token JWT retornado pelo outro Microsservi√ßo.

    // BLOC√ÉO 5: ENDPOINTS DE DELE√á√ÉO (DELETE)
    // -------------------------------------------------------------------------

    @DeleteMapping("/usuario/{email}")
        // Mapeia requisi√ß√µes HTTP DELETE para /usuario/{email} (o e-mail vai na URL como Path Variable).
    void deletaUsuarioPorEmail(
            @PathVariable String email, // @PathVariable: O valor de 'email' √© inserido diretamente na URL mapeada.
            @RequestHeader("Authorization") String token); // Repasse do Token.

    // BLOC√ÉO 6: ENDPOINTS DE ATUALIZA√á√ÉO (PUT)
    // -------------------------------------------------------------------------

    @PutMapping ("/usuario")
        // Mapeia requisi√ß√µes HTTP PUT para /usuario (Atualiza√ß√£o de dados principais).
    UsuarioDTOResponse atualizaDadosUsuario(
            @RequestBody UsuarioDTORequest usuarioDTO, // Corpo da requisi√ß√£o com os novos dados.
            @RequestHeader("Authorization") String token); // Token de autoriza√ß√£o.

    @PutMapping("/usuario/endereco")
        // Mapeia PUT /usuario/endereco. Atualiza um recurso aninhado (Endere√ßo).
    EnderecoDTOResponse atualizaEndereco(
            @RequestBody EnderecoDTORequest enderecoDTO,
            @RequestParam("id") Long id, // ID do endere√ßo a ser atualizado (passado como Query Parameter).
            @RequestHeader("Authorization") String token);

    @PutMapping("/usuario/telefone")
        // Mapeia PUT /usuario/telefone. Atualiza um Telefone.
    TelefoneDTOResponse atualizaTelefone(
            @RequestBody TelefoneDTORequest telefoneDTO,
            @RequestParam("id") Long id, // ID do telefone (passado como Query Parameter).
            @RequestHeader("Authorization") String token);

    // BLOC√ÉO 7: ENDPOINTS DE CRIA√á√ÉO DE RECURSOS ANINHADOS (Protegidos POST)
    // -------------------------------------------------------------------------

    @PostMapping("usuario/endereco")
        // Mapeia POST /usuario/endereco. Cria um novo Endere√ßo para o usu√°rio logado.
    EnderecoDTOResponse cadastraEndereco(
            @RequestBody EnderecoDTORequest enderecoDTO,
            @RequestHeader("Authorization") String token); // Token para identificar o usu√°rio.

    @PostMapping("usuario/telefone")
        // Mapeia POST /usuario/telefone. Cria um novo Telefone para o usu√°rio logado.
    TelefoneDTOResponse cadastraTelefone(
            @RequestBody TelefoneDTORequest telefoneDTO,
            @RequestHeader("Authorization") String token); // Token para identificar o usu√°rio.

}