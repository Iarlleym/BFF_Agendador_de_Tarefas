package com.EngCode.BFF_Agendador_de_Tarefas.infrastructure.client;

// BLOC√ÉO 1: IMPORTA√á√ïES E DTOs
// -------------------------------------------------------------------------

// Importa os DTOs, que s√£o os formatos JSON esperados na comunica√ß√£o HTTP.

import com.EngCode.BFF_Agendador_de_Tarefas.business.dto.in.TarefasDTORequest;
import com.EngCode.BFF_Agendador_de_Tarefas.business.dto.out.TarefasDTOResponse;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.RequestBody;

/**
 * üîπ Interface respons√°vel por fazer a comunica√ß√£o com outro servi√ßo (microservi√ßo de usu√°rios)
 * usando o Feign Client ‚Äî uma ferramenta que facilita chamadas HTTP entre APIs no Spring Boot.
 *
 * Em resumo: essa interface permite buscar dados de um usu√°rio em outro sistema,
 * apenas chamando um m√©todo Java (sem precisar escrever c√≥digo HTTP manualmente).
 */

// BLOC√ÉO 2: CONFIGURA√á√ÉO DO FEIGN CLIENT
// -------------------------------------------------------------------------
@FeignClient(name = "notificacao", url = "${notificacao.url}")
// ANOTA√á√ÉO FEIGN: Marca esta interface como um cliente REST que o Spring deve implementar automaticamente.
// name = "usuario": Nome l√≥gico do servi√ßo (usado internamente).
// url = "${usuario.url}": Endere√ßo base do Microsservi√ßo de Usu√°rios, puxado de uma vari√°vel no application.properties (ex: http://localhost:8081).
public interface EmailClient {
// Feign Clients s√£o sempre interfaces.

    // BLOC√ÉO 3: ENDPOINTS DE CONSULTA (GET)
    // -------------------------------------------------------------------------

    /**
     * üîπ M√©todo respons√°vel por buscar um usu√°rio a partir do e-mail informado.
     * Esse m√©todo faz uma requisi√ß√£o GET para o endpoint "/usuario" do outro servi√ßo.
     *
     * Exemplo de chamada:
     * GET http://servidor/usuario?email=teste@mail.com
     * Header: Authorization: Bearer tokenAqui
     */
     void enviarEmail (@RequestBody TarefasDTOResponse tarefasDTOResponse);
}